// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/kieron-pivotal/birdpedia/birds"
	"github.com/kieron-pivotal/birdpedia/birds/storage"
)

type FakeStore struct {
	CreateBirdStub        func(bird *birds.Bird) error
	createBirdMutex       sync.RWMutex
	createBirdArgsForCall []struct {
		bird *birds.Bird
	}
	createBirdReturns struct {
		result1 error
	}
	createBirdReturnsOnCall map[int]struct {
		result1 error
	}
	GetBirdsStub        func() ([]*birds.Bird, error)
	getBirdsMutex       sync.RWMutex
	getBirdsArgsForCall []struct{}
	getBirdsReturns     struct {
		result1 []*birds.Bird
		result2 error
	}
	getBirdsReturnsOnCall map[int]struct {
		result1 []*birds.Bird
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) CreateBird(bird *birds.Bird) error {
	fake.createBirdMutex.Lock()
	ret, specificReturn := fake.createBirdReturnsOnCall[len(fake.createBirdArgsForCall)]
	fake.createBirdArgsForCall = append(fake.createBirdArgsForCall, struct {
		bird *birds.Bird
	}{bird})
	fake.recordInvocation("CreateBird", []interface{}{bird})
	fake.createBirdMutex.Unlock()
	if fake.CreateBirdStub != nil {
		return fake.CreateBirdStub(bird)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createBirdReturns.result1
}

func (fake *FakeStore) CreateBirdCallCount() int {
	fake.createBirdMutex.RLock()
	defer fake.createBirdMutex.RUnlock()
	return len(fake.createBirdArgsForCall)
}

func (fake *FakeStore) CreateBirdArgsForCall(i int) *birds.Bird {
	fake.createBirdMutex.RLock()
	defer fake.createBirdMutex.RUnlock()
	return fake.createBirdArgsForCall[i].bird
}

func (fake *FakeStore) CreateBirdReturns(result1 error) {
	fake.CreateBirdStub = nil
	fake.createBirdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateBirdReturnsOnCall(i int, result1 error) {
	fake.CreateBirdStub = nil
	if fake.createBirdReturnsOnCall == nil {
		fake.createBirdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createBirdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) GetBirds() ([]*birds.Bird, error) {
	fake.getBirdsMutex.Lock()
	ret, specificReturn := fake.getBirdsReturnsOnCall[len(fake.getBirdsArgsForCall)]
	fake.getBirdsArgsForCall = append(fake.getBirdsArgsForCall, struct{}{})
	fake.recordInvocation("GetBirds", []interface{}{})
	fake.getBirdsMutex.Unlock()
	if fake.GetBirdsStub != nil {
		return fake.GetBirdsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getBirdsReturns.result1, fake.getBirdsReturns.result2
}

func (fake *FakeStore) GetBirdsCallCount() int {
	fake.getBirdsMutex.RLock()
	defer fake.getBirdsMutex.RUnlock()
	return len(fake.getBirdsArgsForCall)
}

func (fake *FakeStore) GetBirdsReturns(result1 []*birds.Bird, result2 error) {
	fake.GetBirdsStub = nil
	fake.getBirdsReturns = struct {
		result1 []*birds.Bird
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetBirdsReturnsOnCall(i int, result1 []*birds.Bird, result2 error) {
	fake.GetBirdsStub = nil
	if fake.getBirdsReturnsOnCall == nil {
		fake.getBirdsReturnsOnCall = make(map[int]struct {
			result1 []*birds.Bird
			result2 error
		})
	}
	fake.getBirdsReturnsOnCall[i] = struct {
		result1 []*birds.Bird
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBirdMutex.RLock()
	defer fake.createBirdMutex.RUnlock()
	fake.getBirdsMutex.RLock()
	defer fake.getBirdsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Store = new(FakeStore)
